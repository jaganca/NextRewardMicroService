package com.nexteducation.NextConfig.module.service.impl;

import java.util.List;

import javax.transaction.Transactional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nexteducation.NextConfig.hibernate.datasourceRouting.ReadOnlyConnection;
import com.nexteducation.NextConfig.module.mapper.LanguageMapper;
import com.nexteducation.NextConfig.module.model.bo.Language;
import com.nexteducation.NextConfig.module.model.params.Language.LanguageDeleteParams;
import com.nexteducation.NextConfig.module.model.params.Language.LanguageFetchParams;
import com.nexteducation.NextConfig.module.model.params.Language.LanguageUpdateParams;
import com.nexteducation.NextConfig.module.model.request.Language.LanguageAddRequest;
import com.nexteducation.NextConfig.module.model.request.Language.LanguageUpdateRequest;
import com.nexteducation.NextConfig.module.model.response.AddResponse;
import com.nexteducation.NextConfig.module.model.response.JerseyResponse;
import com.nexteducation.NextConfig.module.model.response.Language.LanguageResponse;
import com.nexteducation.NextConfig.module.repository.LanguageRepository;
import com.nexteducation.NextConfig.module.service.core.LanguageService;
import com.nexteducation.NextConfig.util.DU;
import com.nexteducation.NextService.exception.NextServiceClientException;
import com.nexteducation.NextService.exception.NextServiceException;
import com.nexteducation.NextService.module.filter.queryable.QueryableParams;
import com.nexteducation.NextService.module.model.params.SessionParams;

@Service("LanguageService")
public class LanguageServiceImpl implements LanguageService {

	@Autowired
	LanguageRepository languageRepository;

	@Autowired
	LanguageMapper languageMapper;

	
	/**
	 * Fetches the Language for a given Language Long.
	 * @param CategoryFetchParams
	 * @param sessionParams
	 * @param queryable
	 * @return LanguageResponse
	 */
	@Override
	@Transactional
	@ReadOnlyConnection
	public LanguageResponse fetchLanguages(LanguageFetchParams languageFetchParams,
			@Valid SessionParams sessionParams, @Valid QueryableParams queryable)
			throws NextServiceException, NextServiceClientException {

		Language language = languageRepository.findByIdAndBranchId(languageFetchParams.getLanguageId(), sessionParams. getBranchId());
		//if(language == null){
		//	throw new NextServiceException("FetchLanguageData","not found",500,"Language not found in the repositroy for a given languageId","Internal Server error");
		//}
		LanguageResponse languageResponse = languageMapper
				.LanguageToLanguageResponse(language);
		return languageResponse;

	}

	/**
	 * Update the Language for a given Language Long.
	 * @param CategoryUpdateParams
	 * @param sessionParams
	 * @param queryable
	 * @return JerseyResponse
	 */
	@Override
	@Transactional
	public JerseyResponse updateLanguages(@Valid LanguageUpdateParams languageUpdateParams,
			@Valid SessionParams sessionParams, QueryableParams queryable,
			LanguageUpdateRequest languageUpdateRequest)
			throws NextServiceException, NextServiceClientException {
		JerseyResponse jerseyResponse = new JerseyResponse();

		Language language = languageMapper
				.LanguageUpdateRequestToLanguage(languageUpdateRequest);
		if(language == null){
			throw new NextServiceException("updateLanguages","not found",500,"Language not found in the repository for a given languageId","Internal Server error");
		}
		Language languageUpdate = languageRepository
				.findById( (languageUpdateRequest.getId()));
		languageUpdate.setModifiedBy(sessionParams.getUserId());
		languageUpdate.setModifiedOn(DU.now());
		languageUpdate.setAll(language);
		languageRepository.save(languageUpdate);
		return jerseyResponse.withCode("true").withMsg("Record Updated Successfully");

	}
	/**
	 * Delete the Language for a given Language Long.
	 * @param CategoryDeleteParams
	 * @param sessionParams
	 * @param queryable
	 * @return LanguageResponse
	 */

	@Override
	@Transactional
	public JerseyResponse deleteLanguages(@Valid LanguageDeleteParams languageDeleteParams,
			@Valid SessionParams sessionParams, QueryableParams queryable) {
		JerseyResponse jerseyResponse = new JerseyResponse();
		Long Long = languageDeleteParams.getLanguageId();
		Language languageDelete = languageRepository.findById(Long);
		if(languageDelete == null){
			throw new NextServiceException("deleteLanguages","not found",500,"Language not found in the repository for a given languageId","Internal Server error");
		}
		languageRepository.delete(languageDelete);
		return jerseyResponse.withMsg("Record deleted Successfully").withCode("true");
	}

	/**
	 * Fetches all the languages corresponding to the Branch and Academic Session ID
	 * @param sessionParams
	 * @param queryable
	 * @return List<LanguageResponse>
	 */
	
	@Override
	@Transactional
	@ReadOnlyConnection
	public List<LanguageResponse> fetchAllLanguages(SessionParams sessionParams,
			QueryableParams queryable) {
		List<Language> languageList = languageRepository.findByBranchId(sessionParams. getBranchId());
//		if(languageList == null){
//			throw new NextServiceException("fetchAllLanguages","not found",500,"No language found","Internal Server error");
//		}
		List<Language> nullLanguage = languageRepository.findByBranchId(null);
		languageList.addAll(nullLanguage);
		return languageMapper.LanguageListToLanguageResponseList(languageList);

	}
	/**
	 * Adds a new Language
	 * @param sessionParams
	 * @param queryable
	 * @return JerseyResponse
	 */

	@Override
	@Transactional
	public AddResponse addLanguages(SessionParams sessionParams, QueryableParams queryable,
			LanguageAddRequest languageAddRequest) {
		AddResponse addResponse = new AddResponse();
		Language language = languageMapper
				.LanguageAddRequestToLanguage(languageAddRequest);
		language.setCreatedBy(sessionParams.getUserId());
		language.setModifiedBy(sessionParams.getUserId());
		language.setBranchId(sessionParams. getBranchId());
		languageRepository.save(language);
		addResponse.setId(language.getId());
		addResponse.setCode("200");
		addResponse.setMsg("Language added succesfully");
		return addResponse;

	}

}
