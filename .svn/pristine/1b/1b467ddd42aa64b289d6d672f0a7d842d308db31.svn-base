package com.nexteducation.NextConfig.module.service.impl;

import java.util.Arrays;
import java.util.List;

import javax.transaction.Transactional;

import org.apache.commons.lang.WordUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nexteducation.NextConfig.hibernate.datasourceRouting.ReadOnlyConnection;
import com.nexteducation.NextConfig.module.dto.CustomFieldDTO;
import com.nexteducation.NextConfig.module.mapper.CustomFieldMapper;
import com.nexteducation.NextConfig.module.model.bo.CustomField;
import com.nexteducation.NextConfig.module.model.bo.CustomFieldList;
import com.nexteducation.NextConfig.module.model.params.CustomField.CustomFieldFetchParams;
import com.nexteducation.NextConfig.module.model.response.JerseyResponse;
import com.nexteducation.NextConfig.module.repository.CustomFieldListRepository;
import com.nexteducation.NextConfig.module.repository.CustomFieldRepository;
import com.nexteducation.NextConfig.module.service.core.CustomFieldListService;
import com.nexteducation.NextConfig.module.service.core.CustomFieldService;
import com.nexteducation.NextService.exception.NextServiceException;
import com.nexteducation.NextService.module.filter.queryable.QueryableParams;
import com.nexteducation.NextService.module.model.params.SessionParams;
import com.nexteducation.NextService.util.DU;

@Service("CustomFieldService")
public class CustomFieldServiceImpl implements CustomFieldService {

	@Autowired
	CustomFieldRepository customFieldRepository;

	@Autowired
	CustomFieldMapper customFieldMapper;

	@Autowired
	CustomFieldListService customFieldListService;

	@Autowired
	CustomFieldListRepository customFieldListRepository;

	@Override
	@Transactional
	@ReadOnlyConnection
	public CustomFieldDTO fetchCustomFields(Long customFieldId, SessionParams sessionParams) {
		CustomField customField = customFieldRepository.findById(customFieldId);
		if (customField == null) {
			throw new NextServiceException("NextConfig", "NotFound", 404,
					"No Custom field with the given Identifier found",
					"No Custom field with the given Identifier found");
		}
		CustomFieldDTO customFieldDTO = customFieldMapper.customFieldToCustomFieldDTO(customField);
		return customFieldDTO;
	}

	@Override
	@Transactional
	public JerseyResponse updateCustomFields(Long customFieldId, SessionParams sessionParams,
			CustomFieldDTO customFieldDTO) {
		CustomField customFieldUpdate = customFieldRepository.findById(customFieldId);
		if (customFieldUpdate == null) {
			throw new NextServiceException("NextConfig", "NotFound", 404,
					"No Custom field with the given Identifier found",
					"No Custom field with the given Identifier found");
		}
		CustomField customField = customFieldMapper.customFieldDTOToCustomField(customFieldDTO);
		/*String key = WordUtils.capitalizeFully(customField.getDefaultLabel(), new char[] { ' ', '_' })
				.replaceAll("[^a-zA-Z0-9]", "");*/
		String key = customField.getDefaultLabel().toLowerCase().replaceAll("[^a-zA-Z0-9]", "");
		customField.setKey(key);
		customFieldUpdate.setAll(customField);
		customFieldUpdate.setModifiedBy(sessionParams.getUserId());
		customFieldUpdate.setModifiedOn(DU.now());
		customFieldRepository.save(customFieldUpdate);
		customFieldListService.addOrUpdateCustomFieldLists(customFieldId, sessionParams,
				customFieldDTO.getCustomFieldLists());
		return new JerseyResponse().withCode("Success").withMsg("Record Updated Successfully");
	}

	@Override
	@Transactional
	public JerseyResponse deleteCustomFields(Long customFieldId, SessionParams sessionParams) {
		CustomField customFieldDelete = customFieldRepository.findById(customFieldId);
		if (customFieldDelete == null) {
			throw new NextServiceException("NextConfig", "NotFound", 404,
					"No Custom field with the given Identifier found",
					"No Custom field with the given Identifier found");
		}
		List<CustomFieldList> customFieldLists = customFieldDelete.getCustomFieldLists();
		customFieldListRepository.deleteInBatch(customFieldLists);
		customFieldRepository.delete(customFieldDelete);
		return new JerseyResponse().withMsg("Record deleted Successfully").withCode("Success");

	}

	@Override
	@Transactional
	@ReadOnlyConnection
	public List<CustomFieldDTO> fetchCustomFields(CustomFieldFetchParams customFieldFetchParams,
			SessionParams sessionParams, QueryableParams queryable) {
		if (customFieldFetchParams.getBranchId() == null) {
			customFieldFetchParams.setBranchId(sessionParams.getBranchId());
		}
		List<CustomField> customFieldList = customFieldRepository.findByBOFilters(customFieldFetchParams, queryable);
		return customFieldMapper.customFieldListToCustomFieldDTOList(customFieldList);
	}

	@Override
	@Transactional
	public JerseyResponse addCustomFields(SessionParams sessionParams, CustomFieldDTO customFieldDTO) {
		if (customFieldDTO.getId() != null) {
			throw new NextServiceException("NextConfig", "BadRequest", 404, "Cannot update entity in Add method",
					"Custom field is already present in the Database");
		}
		
		List<String> entities = Arrays.asList(customFieldDTO.getEntityName().split(","));
		for(String entity : entities){
		CustomField customField = customFieldMapper.customFieldDTOToCustomField(customFieldDTO);	
		customField.setEntityName(entity);
		customField.setCreatedBy(sessionParams.getUserId());
		customField.setCreatedOn(DU.now());
		/*String key = WordUtils.capitalizeFully(customField.getDefaultLabel(), new char[] { ' ', '_' })
				.replaceAll("[^a-zA-Z0-9]", "");*/
		String key = customField.getDefaultLabel().toLowerCase().replaceAll("[^a-zA-Z0-9]", "");
		customField.setKey(key);
		customField.setBranchId(sessionParams.getBranchId());
		customField.setModifiedBy(sessionParams.getUserId());
		customField.setModifiedOn(DU.now());
		customFieldRepository.save(customField);
		customFieldListService.addOrUpdateCustomFieldLists(customField.getId(), sessionParams,
				customFieldDTO.getCustomFieldLists());
		}
		return new JerseyResponse().withMsg("Record Added Successfully").withCode("Success");
		
	}

}