package com.nexteducation.NextConfig.module.repository.custom.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.nexteducation.NextConfig.module.dto.CustomFieldDTO;
import com.nexteducation.NextConfig.module.mapper.CustomFieldDataMapper;
import com.nexteducation.NextConfig.module.mapper.CustomFieldMapper;
import com.nexteducation.NextConfig.module.model.bo.CustomField;
import com.nexteducation.NextConfig.module.model.bo.CustomFieldData;
import com.nexteducation.NextConfig.module.model.params.CustomField.CustomFieldFetchParams;
import com.nexteducation.NextConfig.module.repository.custom.core.CustomFieldRepositoryCustom;
import com.nexteducation.NextService.module.filter.queryable.QueryableParams;
import com.nexteducation.NextService.util.ERPApp;

@Repository
public class CustomFieldRepositoryImpl implements CustomFieldRepositoryCustom {

	@Autowired
	CustomFieldMapper customFieldMapper;

	@Autowired
	CustomFieldDataMapper customFieldDataMapper;

	@PersistenceContext
	private EntityManager entityManager;

	@Override
	public List<CustomField> findByBOFilters(CustomFieldFetchParams customFieldFetchParams,
			QueryableParams queryableParams) {
		final StringBuilder builder = new StringBuilder(" select distinct cf from CustomField cf ");
		if (customFieldFetchParams.getFetch() != null && !customFieldFetchParams.getFetch().isEmpty()) {
			if (containsCaseInsensitive("custom_field_lists", customFieldFetchParams.getFetch())) {
				builder.append(" left join fetch cf.customFieldLists cfcfl ");
			}
			if (containsCaseInsensitive("custom_form_elements", customFieldFetchParams.getFetch())) {
				builder.append(" left join fetch cf.customFormElements cfcfe ");
			}
			if (containsCaseInsensitive("custom_field_data", customFieldFetchParams.getFetch())) {
				builder.append(" left join fetch cf.customFieldData cfcfd ");
			}
		}
		builder.append(" where 1 = 1 ");
		if (!ERPApp.isEmptyObject(customFieldFetchParams.getBranchId())) {
			builder.append(" and cf.branchId = :branchId ");
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityNames())) {
			builder.append(" and cf.entityName in (:entityName) ");
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityInstanceIds())) {
			builder.append(" and cfcfd.entityInstanceId in (:entityInstanceIds) ");
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getCustomFieldIds())) {
			if (customFieldFetchParams.isMandatoryFetch())
				builder.append(" and ( cf.id in (:customFieldIds) or cf.mandatory = true ) ");
			else
				builder.append(" and cf.id in (:customFieldIds) ");
		}
		if (customFieldFetchParams.getMandatory() != null) {
			builder.append(" and cf.mandatory = :mandatory ");
		}
		final TypedQuery<CustomField> query = entityManager.createQuery(builder.toString(), CustomField.class);
		if (!ERPApp.isEmptyObject(customFieldFetchParams.getBranchId())) {
			query.setParameter("branchId", customFieldFetchParams.getBranchId());
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityNames())) {
			query.setParameter("entityName", customFieldFetchParams.getEntityNames());
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityInstanceIds())) {
			query.setParameter("entityInstanceIds", customFieldFetchParams.getEntityInstanceIds());
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getCustomFieldIds())) {
			query.setParameter("customFieldIds", customFieldFetchParams.getCustomFieldIds());
		}
		if (customFieldFetchParams.getMandatory() != null) {
			query.setParameter("mandatory", customFieldFetchParams.getMandatory());
		}
		List<CustomField> customField = query.getResultList();
		return customField;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<CustomFieldDTO> fetchFieldWithData(CustomFieldFetchParams customFieldFetchParams,
			QueryableParams queryableParams) {
		final StringBuilder builder = new StringBuilder(" select distinct cf, cfcfd from CustomField cf ");
		builder.append(" left join cf.customFieldData cfcfd ");
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityInstanceIds())) {
			builder.append(" with cfcfd.entityInstanceId in (:entityInstanceIds) ");
		}
		builder.append(" where 1 = 1 ");
		if (!ERPApp.isEmptyObject(customFieldFetchParams.getBranchId())) {
			builder.append(" and cf.branchId = :branchId ");
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityNames())) {
			builder.append(" and cf.entityName in (:entityName) ");
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getCustomFieldIds())) {
			if (customFieldFetchParams.isMandatoryFetch())
				builder.append(" and ( cf.id in (:customFieldIds) or cf.mandatory = true ) ");
			else
				builder.append(" and cf.id in (:customFieldIds) ");
		}
		if (customFieldFetchParams.getMandatory() != null) {
			builder.append(" and cf.mandatory = :mandatory ");
		}
		final Query query = entityManager.createQuery(builder.toString());
		if (!ERPApp.isEmptyObject(customFieldFetchParams.getBranchId())) {
			query.setParameter("branchId", customFieldFetchParams.getBranchId());
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityNames())) {
			query.setParameter("entityName", customFieldFetchParams.getEntityNames());
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityInstanceIds())) {
			query.setParameter("entityInstanceIds", customFieldFetchParams.getEntityInstanceIds());
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getCustomFieldIds())) {
			query.setParameter("customFieldIds", customFieldFetchParams.getCustomFieldIds());
		}
		if (customFieldFetchParams.getMandatory() != null) {
			query.setParameter("mandatory", customFieldFetchParams.getMandatory());
		}
		List<Object[]> objectList = query.getResultList();
		if (ERPApp.isNullOrEmptyList(objectList)) {
			return null;
		}
		List<CustomField> customFields = new ArrayList<>();
		Map<Long, CustomField> customFieldMap = new HashMap<>();
		Map<Long, List<CustomFieldData>> customFieldDataMap = new HashMap<>();
		for (Object[] obj : objectList) {
			CustomField customField = (CustomField) obj[0];
			customField.setCustomFieldLists(null);
			if (!customFieldMap.containsKey(customField.getId())) {
				customFieldMap.put(customField.getId(), customField);
				customFieldDataMap.put(customField.getId(), new ArrayList<>());
			}
			CustomFieldData customFieldDataArray = (CustomFieldData) obj[1];
			if (customFieldDataArray == null || customFieldDataArray.getId() == null) {
				continue;
			}
			customFieldDataMap.get(customField.getId()).add(customFieldDataArray);
			//List<CustomFieldData> customFieldData = Arrays.asList(customFieldDataArray);
			//customField.getCustomFieldData().add(customFieldDataArray);
		}
		customFields.addAll(customFieldMap.values());
		List<CustomFieldDTO> customFieldDTOs = customFieldMapper.customFieldListToCustomFieldDTOList(customFields);
		for (CustomFieldDTO customFieldDTO : customFieldDTOs) {
			customFieldDTO.setCustomFieldData(customFieldDataMapper
					.customFieldDataToCustomFieldDataShortDTO(customFieldDataMap.get(customFieldDTO.getId())));
		}
		//System.out.println(customFields);
		return customFieldDTOs;
	}

	private boolean containsCaseInsensitive(String s, List<String> l) {
		for (String string : l) {
			if (string.equalsIgnoreCase(s)) {
				return true;
			}
		}
		return false;
	}

	@Override
	public List<CustomField> findByBOFiltersNotInForm(CustomFieldFetchParams customFieldFetchParams,
			QueryableParams queryable, Long formId) {
		final StringBuilder builder = new StringBuilder(" select distinct cf from CustomField cf ");
		if (customFieldFetchParams.getFetch() != null && !customFieldFetchParams.getFetch().isEmpty()) {
			if (containsCaseInsensitive("custom_field_lists", customFieldFetchParams.getFetch())) {
				builder.append(" left join fetch cf.customFieldLists cfcfl ");
			}
			if (containsCaseInsensitive("custom_form_elements", customFieldFetchParams.getFetch())) {
				builder.append(" left join fetch cf.customFormElements cfcfe ");
			}
		}
		builder.append(" where 1 = 1 ");
		if (!ERPApp.isEmptyObject(customFieldFetchParams.getFormName())) {
			builder.append(
					" and cf.id not in ( select cfe.customField.id from CustomFormElement cfe where cfe.form.id =:formId  and cfe.branchId =:branchId and cfe.customField.id is not NULL ) ");
		}
		if (!ERPApp.isEmptyObject(customFieldFetchParams.getBranchId())) {
			builder.append(" and cf.branchId = :branchId ");
		}
		if (!ERPApp.isEmptyObject(customFieldFetchParams.getBranchId())) {
			builder.append(" and cf.branchId = :branchId ");
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityNames())) {
			builder.append(" and cf.entityName in :entityName ");
		}
		final TypedQuery<CustomField> query = entityManager.createQuery(builder.toString(), CustomField.class);
		if (!ERPApp.isEmptyObject(customFieldFetchParams.getFormName())) {
			query.setParameter("formId", formId);
		}
		if (!ERPApp.isEmptyObject(customFieldFetchParams.getBranchId())) {
			query.setParameter("branchId", customFieldFetchParams.getBranchId());
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityNames())) {
			query.setParameter("entityName", customFieldFetchParams.getEntityNames());
		}
		List<CustomField> customField = query.getResultList();
		return customField;
	}

	@Override
	public Long findByCountBOFilters(CustomFieldFetchParams customFieldFetchParams, QueryableParams queryable) {
		final StringBuilder builder = new StringBuilder(" select count(distinct cf.id) from CustomField cf ");
		builder.append(" where 1 = 1 ");
		if (!ERPApp.isEmptyObject(customFieldFetchParams.getBranchId())) {
			builder.append(" and cf.branchId = :branchId ");
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityNames())) {
			builder.append(" and cf.entityName in :entityName ");
		}
		if (customFieldFetchParams.getMandatory() != null) {
			builder.append(" and cf.mandatory = :mandatory ");
		}
		final TypedQuery<Long> query = entityManager.createQuery(builder.toString(), Long.class);
		if (!ERPApp.isEmptyObject(customFieldFetchParams.getBranchId())) {
			query.setParameter("branchId", customFieldFetchParams.getBranchId());
		}
		if (!ERPApp.isNullOrEmptyList(customFieldFetchParams.getEntityNames())) {
			query.setParameter("entityName", customFieldFetchParams.getEntityNames());
		}
		if (customFieldFetchParams.getMandatory() != null) {
			query.setParameter("mandatory", customFieldFetchParams.getMandatory());
		}
		Long count = query.getSingleResult();
		return count;
	}

}
