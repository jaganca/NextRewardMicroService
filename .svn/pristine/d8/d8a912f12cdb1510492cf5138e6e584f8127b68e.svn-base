package com.nexteducation.NextConfig.module.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.nexteducation.NextConfig.hibernate.datasourceRouting.ReadOnlyConnection;
import com.nexteducation.NextConfig.module.mapper.LanguageMapper;
import com.nexteducation.NextConfig.module.model.bo.Language;
import com.nexteducation.NextConfig.module.model.params.Language.LanguageDeleteParams;
import com.nexteducation.NextConfig.module.model.params.Language.LanguageFetchParams;
import com.nexteducation.NextConfig.module.model.params.Language.LanguageUpdateParams;
import com.nexteducation.NextConfig.module.model.request.Language.LanguageAddRequest;
import com.nexteducation.NextConfig.module.model.request.Language.LanguageUpdateRequest;
import com.nexteducation.NextConfig.module.model.response.AddResponse;
import com.nexteducation.NextConfig.module.model.response.JerseyResponse;
import com.nexteducation.NextConfig.module.model.response.Language.LanguageResponse;
import com.nexteducation.NextConfig.module.repository.LanguageRepository;
import com.nexteducation.NextConfig.module.service.core.LanguageService;
import com.nexteducation.NextConfig.util.Constants;
import com.nexteducation.NextConfig.util.DU;
import com.nexteducation.NextService.exception.NextServiceException;
import com.nexteducation.NextService.module.filter.queryable.QueryableParams;
import com.nexteducation.NextService.module.model.params.SessionParams;

@Service("languageService")
public class LanguageServiceImpl implements LanguageService {

	@Autowired
	LanguageRepository languageRepository;

	@Autowired
	LanguageMapper languageMapper;

	/**
	 * Fetches the Language for a given Language Long.
	 * @param CategoryFetchParams
	 * @param sessionParams
	 * @param queryable
	 * @return LanguageResponse
	 */
	@Override
	@Transactional(readOnly = true)
	@ReadOnlyConnection
	public LanguageResponse fetchLanguages(LanguageFetchParams languageFetchParams, SessionParams sessionParams,
			QueryableParams queryable) {
		Language language = languageRepository.findByIdAndBranchId(languageFetchParams.getLanguageId(),
				sessionParams.getBranchId());
		if (language == null) {
			throw new NextServiceException(Constants.MODULE_NAME, Constants.ERROR_404, 404, Constants.RECORD_NOT_FOUND,
					Constants.RECORD_NOT_FOUND);
		}
		return languageMapper.languageToLanguageResponse(language);
	}

	/**
	 * Update the Language for a given Language Long.
	 * @param CategoryUpdateParams
	 * @param sessionParams
	 * @param queryable
	 * @return JerseyResponse
	 */
	@Override
	@Transactional
	public JerseyResponse updateLanguages(LanguageUpdateParams languageUpdateParams, SessionParams sessionParams,
			QueryableParams queryable, LanguageUpdateRequest languageUpdateRequest) {
		Language languageUpdate = languageRepository.findById(languageUpdateParams.getLanguageId());
		if (languageUpdate == null) {
			throw new NextServiceException(Constants.MODULE_NAME, Constants.ERROR_404, 404, Constants.RECORD_NOT_FOUND,
					Constants.RECORD_NOT_FOUND);
		}
		Language language = languageMapper.languageUpdateRequestToLanguage(languageUpdateRequest);
		languageUpdate.setModifiedBy(sessionParams.getUserId());
		languageUpdate.setModifiedOn(DU.now());
		languageUpdate.setAll(language);
		languageRepository.save(languageUpdate);
		return new JerseyResponse().withCode(Constants.SUCCESS).withMsg(Constants.RECORDS_UPDATED);

	}

	/**
	 * Delete the Language for a given Language Long.
	 * @param CategoryDeleteParams
	 * @param sessionParams
	 * @param queryable
	 * @return LanguageResponse
	 */
	@Override
	@Transactional
	public JerseyResponse deleteLanguages(LanguageDeleteParams languageDeleteParams, SessionParams sessionParams,
			QueryableParams queryable) {
		Language languageDelete = languageRepository.findById(languageDeleteParams.getLanguageId());
		if (languageDelete == null) {
			throw new NextServiceException(Constants.MODULE_NAME, Constants.ERROR_404, 404, Constants.RECORD_NOT_FOUND,
					Constants.RECORD_NOT_FOUND);
		}
		try {
			languageRepository.delete(languageDelete);
		} catch (DataIntegrityViolationException e) {
			throw new NextServiceException(Constants.MODULE_NAME, Constants.ERROR_500, 500,
					"Constraint Violation Exception",
					"Please unassign all the Students and the Staff associated with this Language and try again!");

		}
		return new JerseyResponse().withMsg(Constants.RECORDS_DELETED).withCode(Constants.SUCCESS);
	}

	/**
	 * Adds a new Language
	 * @param sessionParams
	 * @param queryable
	 * @return JerseyResponse
	 */

	@Override
	@Transactional
	public AddResponse addLanguages(SessionParams sessionParams, QueryableParams queryable,
			LanguageAddRequest languageAddRequest) {
		AddResponse addResponse = new AddResponse();
		Language language = languageMapper.languageAddRequestToLanguage(languageAddRequest);
		language.setCreatedBy(sessionParams.getUserId());
		language.setModifiedBy(sessionParams.getUserId());
		language.setCreatedOn(DU.now());
		language.setModifiedOn(DU.now());
		language.setBranchId(sessionParams.getBranchId());
		languageRepository.save(language);
		addResponse.setId(language.getId());
		addResponse.setCode(Constants.SUCCESS);
		addResponse.setMsg(Constants.RECORDS_INSERTED);
		return addResponse;

	}

	@Override
	@Transactional(readOnly = true)
	@ReadOnlyConnection
	public List<LanguageResponse> fetchAllLanguages(SessionParams sessionParams, QueryableParams queryable) {
		List<Language> languageList = languageRepository.fetchMasterAndCustomLanguages(sessionParams.getBranchId());
		return languageMapper.languageListToLanguageResponseList(languageList);
	}
}
