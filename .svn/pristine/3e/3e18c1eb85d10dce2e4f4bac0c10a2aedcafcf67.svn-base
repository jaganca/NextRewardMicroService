package com.nexteducation.NextConfig.module.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;

import org.springframework.transaction.annotation.Transactional;

import org.redisson.api.RedissonClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

import com.nexteducation.NextConfig.hibernate.datasourceRouting.ReadOnlyConnection;
import com.nexteducation.NextConfig.module.mapper.AutoNumberingMapper;
import com.nexteducation.NextConfig.module.model.bo.AutoNumbering;
import com.nexteducation.NextConfig.module.model.enums.Status;
import com.nexteducation.NextConfig.module.model.enums.Type;
import com.nexteducation.NextConfig.module.model.params.AutoNumbering.AutoNumberingDeleteContextParams;
import com.nexteducation.NextConfig.module.model.params.AutoNumbering.AutoNumberingFetchParams;
import com.nexteducation.NextConfig.module.model.params.AutoNumbering.AutoNumberingUpdateContextParams;
import com.nexteducation.NextConfig.module.model.request.AutoNumbering.AutoNumberingAddRequest;
import com.nexteducation.NextConfig.module.model.request.AutoNumbering.AutoNumberingGenerateRequest;
import com.nexteducation.NextConfig.module.model.request.AutoNumbering.AutoNumberingUpdateRequest;
import com.nexteducation.NextConfig.module.model.response.AddResponse;
import com.nexteducation.NextConfig.module.model.response.AutoNumberingResponse;
import com.nexteducation.NextConfig.module.model.response.JerseyResponse;
import com.nexteducation.NextConfig.module.repository.AutoNumberingRepository;
import com.nexteducation.NextConfig.module.service.core.AutoNumberingService;
import com.nexteducation.NextConfig.util.DU;
import com.nexteducation.NextService.exception.NextServiceException;
import com.nexteducation.NextService.module.filter.queryable.QueryableParams;
import com.nexteducation.NextService.module.model.params.SessionParams;

@Service("autoNumberingService")
public class AutoNumberingServiceImpl implements AutoNumberingService {

	@Autowired
	AutoNumberingMapper autoNumberingMapper;

	@Autowired
	RedissonClient redisson;

	@Autowired
	AutoNumberingRepository autoNumberingRepository;

	@Transactional
	public AddResponse addAutoNumberings(SessionParams sessionParams, QueryableParams queryable,
			AutoNumberingAddRequest autoNumberingAddRequest) {
		if (sessionParams == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "no", "AutoNumbering");
			throw exception;
		}
		if (autoNumberingAddRequest == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "InvalidRequest", "AutoNumbering");
			throw exception;
		}
		try {
			AutoNumbering autoNumbering = autoNumberingMapper
					.AutoNumberingAddRequestToAutoNumbering(autoNumberingAddRequest);
			autoNumbering.setCreatedBy(sessionParams.getUserId());
			autoNumbering.setModifiedBy(sessionParams.getUserId());
			autoNumbering.setStatus(Status.Active);
			autoNumbering.setCreatedOn(DU.now());
			autoNumbering.setModifiedOn(DU.now());
			autoNumberingRepository.save(autoNumbering);

			AddResponse addResponse = new AddResponse();
			addResponse.setCode("true");
			addResponse.setMsg("Record added Successfully");
			addResponse.setId(autoNumbering.getId());
			return addResponse;
		}catch (DataIntegrityViolationException e) {
			e.printStackTrace();
			throw new NextServiceException("NextConfig", "Internal server error", 500, e.getMessage(), "DataIntegrityViolationException : Unique Key Constraint Failed");
		} 
		catch (Exception e) {
			e.printStackTrace();
			throw e;
		}

	}

	@Transactional
	public AutoNumberingResponse generateAutoGeneratedNos(SessionParams sessionParams,
			AutoNumberingGenerateRequest autoNumberingGenerateRequest) {
		Long branchId = sessionParams.getBranchId();
		Long academicSessionId = sessionParams.getAcademicSessionId();
		Type type = autoNumberingGenerateRequest.getType();
		long subType = autoNumberingGenerateRequest.getSubType();
		if (branchId == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "InvalidBranchId", "AutoNumbering");
			throw exception;
		}
		if (academicSessionId == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "Invalid AcademicSessionId", "AutoNumbering");
			throw exception;
		}
		if (type == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "InvalidType", "AutoNumbering");
			throw exception;
		}

		Lock lock = redisson
				.getLock(branchId + "_" + type.toString() + "_" + Long.toString(subType) + "_" + academicSessionId);
		try {
			lock.tryLock(1000, TimeUnit.SECONDS);
			AutoNumbering autoNumbering = autoNumberingRepository
					.findByBranchIdAndTypeAndSubTypeAndAcademicSessionId(branchId, type, subType, academicSessionId);
			autoNumbering.setVariableStart(autoNumbering.getVariableStart() + 1);
			autoNumberingRepository.save(autoNumbering);
			AutoNumberingResponse autoNumberingResponse = autoNumberingMapper
					.AutoNumberingToAutoNumberingResponse(autoNumbering);
			return autoNumberingResponse;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		} finally {
			lock.unlock();
		}
	}

	@Override
	@Transactional
	public AutoNumberingResponse generateAutoNumber(SessionParams sessionParams,
			AutoNumberingAddRequest autoNumberingAddRequest){
		Long branchId = sessionParams.getBranchId();
		Long academicSessionId = sessionParams.getAcademicSessionId();
		Type type = autoNumberingAddRequest.getType();
		long subType = autoNumberingAddRequest.getSubType();
		if (branchId == null) {
			throw new NextServiceException("NextConfig", "AutoNumbering", 500, "Branch Id is not provided.", "Branch Id is not provided.");
		}
		if (academicSessionId == null) {
			throw new NextServiceException("NextConfig", "AutoNumbering", 500, "Academic Session Id is not provided.", "Academic Session Id is not provided.");
		}
		if (type == null) {
			throw new NextServiceException("NextConfig", "AutoNumbering", 500, "Type is not provided.", "Type is not provided.");
		}
		
		Lock lock = redisson
				.getLock(branchId + "_" + type.toString() + "_" + Long.toString(subType) + "_" + academicSessionId);
		try {
				lock.tryLock(1000, TimeUnit.SECONDS);
				AutoNumbering autoNumbering = autoNumberingRepository
						.findByBranchIdAndTypeAndSubTypeAndAcademicSessionId(branchId, type, subType, academicSessionId);
				if(autoNumbering != null){
					AutoNumberingResponse autoNumberingResponse = generateAutoNumber(autoNumbering);
					return autoNumberingResponse;
				}
				else{
					AutoNumberingResponse autoNumberingResponse = saveAutoNumber(sessionParams, autoNumberingAddRequest);
					return autoNumberingResponse;
				}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		} finally {
			lock.unlock();
		}
	}
	
	

	private AutoNumberingResponse saveAutoNumber(SessionParams sessionParams,
			AutoNumberingAddRequest autoNumberingAddRequest) {
		AutoNumbering autoNumbering = autoNumberingMapper
				.AutoNumberingAddRequestToAutoNumbering(autoNumberingAddRequest);
		autoNumbering.setBranchId(sessionParams.getBranchId());
		autoNumbering.setAcademicSessionId(sessionParams.getAcademicSessionId());
		autoNumbering.setCreatedBy(sessionParams.getUserId());
		autoNumbering.setModifiedBy(sessionParams.getUserId());
		autoNumbering.setStatus(Status.Active);
		autoNumbering.setCreatedOn(DU.now());
		autoNumbering.setModifiedOn(DU.now());
		autoNumberingRepository.save(autoNumbering);
		AutoNumberingResponse autoNumberingResponse = autoNumberingMapper
				.AutoNumberingToAutoNumberingResponse(autoNumbering);
		return autoNumberingResponse;
	}

	private AutoNumberingResponse generateAutoNumber(AutoNumbering autoNumbering) {
		autoNumbering.setVariableStart(autoNumbering.getVariableStart() + 1);
		autoNumberingRepository.save(autoNumbering);
		AutoNumberingResponse autoNumberingResponse = autoNumberingMapper
				.AutoNumberingToAutoNumberingResponse(autoNumbering);
		return autoNumberingResponse;
	}

	@Transactional
	public JerseyResponse deleteAutoNumberings(AutoNumberingDeleteContextParams autoNumberingDeleteContextParams,
			SessionParams sessionParams, QueryableParams queryable) {
		JerseyResponse jerseyResponse = new JerseyResponse();
		if (sessionParams == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "no", "AutoNumbering");
			throw exception;
		}
		if (autoNumberingDeleteContextParams == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "Invalid Request", "AutoNumbering");
			throw exception;
		}
		try {
			Long id = autoNumberingDeleteContextParams.getAutoNumberingId();
			AutoNumbering autoNumbering = autoNumberingRepository.findById(id);
			autoNumberingRepository.delete(autoNumbering);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return jerseyResponse.withMsg("Record deleted Successfully").withCode("true");
	}

	@Override
	@Transactional(readOnly = true)
	@ReadOnlyConnection
	public List<AutoNumberingResponse> fetchAutoNumberings(final Type type,SessionParams sessionParams, QueryableParams queryable) {
		List<AutoNumbering> autoNumberingList=new ArrayList<AutoNumbering>();
	if(type==null){
			 autoNumberingList = autoNumberingRepository.findByBranchIdAndAcademicSessionId(
			sessionParams.getBranchId(), sessionParams.getAcademicSessionId());
				}
	else{
		 autoNumberingList = autoNumberingRepository.findByBranchIdAndAcademicSessionIdAndType(
				sessionParams.getBranchId(), sessionParams.getAcademicSessionId(),type);
		}
		return autoNumberingMapper.AutoNumberingListToAutoNumberingResponseList(autoNumberingList);
	
	}

	@Transactional
	public JerseyResponse updateAutoNumberings(AutoNumberingUpdateContextParams autoNumberingUpdateContextParams,
			SessionParams sessionParams, QueryableParams queryable,
			AutoNumberingUpdateRequest autoNumberingUpdateRequest) {
		JerseyResponse jerseyResponse = new JerseyResponse();
		if (autoNumberingUpdateContextParams == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "no", "AutoNumbering");
			throw exception;
		}
		if (sessionParams == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "no", "AutoNumbering");
			throw exception;
		}
		if (autoNumberingUpdateRequest == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "no", "AutoNumbering");
			throw exception;
		}
		try {
			AutoNumbering autoNumbering = autoNumberingRepository.findById((autoNumberingUpdateRequest.getId()));
			autoNumbering.setFixedValue(autoNumberingUpdateRequest.getFixedValue());
			autoNumbering.setVariableStart(autoNumberingUpdateRequest.getVariableStart());
			autoNumbering.setStatus(autoNumberingUpdateRequest.getStatus());
			autoNumbering.setModifiedBy(sessionParams.getUserId());
			autoNumbering.setModifiedOn(DU.now());
			autoNumberingRepository.save(autoNumbering);
		} 
		catch (DataIntegrityViolationException e) {
			e.printStackTrace();
			throw new NextServiceException("NextConfig", "Internal server error", 500, e.getMessage(), "DataIntegrityViolationException : Unique Key Constraint Failed");
		} 
		catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return jerseyResponse.withCode("true").withMsg("Record Updated Successfully");

	}
	@Override
	@Transactional
	public JerseyResponse updateBulkAutoNumberings(
			SessionParams sessionParams,
			List<AutoNumberingUpdateRequest> autoNumberingUpdateRequests) {
		JerseyResponse jerseyResponse = new JerseyResponse();

		if (sessionParams == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "no", "AutoNumbering");
			throw exception;
		}
		if (autoNumberingUpdateRequests == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "badRequest", 401, "Null request sent", "Null request sent");
			throw exception;
		}
		for(AutoNumberingUpdateRequest autoNumberingUpdateRequest : autoNumberingUpdateRequests){
			AutoNumbering autoNumbering = autoNumberingRepository.findById((autoNumberingUpdateRequest.getId()));
			autoNumbering.setFixedValue(autoNumberingUpdateRequest.getFixedValue());
			autoNumbering.setVariableStart(autoNumberingUpdateRequest.getVariableStart());
			autoNumbering.setStatus(autoNumberingUpdateRequest.getStatus());
			autoNumbering.setModifiedBy(sessionParams.getUserId());
			autoNumbering.setModifiedOn(DU.now());
			autoNumberingRepository.save(autoNumbering);
		}
		
		return jerseyResponse.withCode("true").withMsg("Record Updated Successfully");

	}

	@Override
	public AutoNumberingResponse fetchAutoNumberings(AutoNumberingFetchParams AutoNumberingFetchParams,
			SessionParams sessionParams, QueryableParams queryable) {

		Long id = AutoNumberingFetchParams.getAutoNumberingId();
		AutoNumbering autoNumbering = autoNumberingRepository.findById(id);
		return autoNumberingMapper.AutoNumberingToAutoNumberingResponse(autoNumbering);
	}

	@Override
	public AutoNumberingResponse generateAutoGeneratedNosById(AutoNumberingFetchParams AutoNumberingFetchParams,
			SessionParams sessionParams, QueryableParams queryable) {
		// TODO Auto-generated method stub
		Long id = AutoNumberingFetchParams.getAutoNumberingId();
		AutoNumbering autoNumberingFetch = autoNumberingRepository.findById(id);

		Long branchId = sessionParams.getBranchId();
		Long academicSessionId = sessionParams.getAcademicSessionId();
		Type type = autoNumberingFetch.getType();
		long subType = autoNumberingFetch.getSubType();
		if (branchId == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "no", "AutoNumbering");
			throw exception;
		}
		if (academicSessionId == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "no", "AutoNumbering");
			throw exception;
		}
		if (type == null) {
			NextServiceException exception = new NextServiceException("NextConfig", "code", 504, "no", "AutoNumbering");
			throw exception;
		}

		Lock lock = redisson
				.getLock(branchId + "_" + type.toString() + "_" + Long.toString(subType) + "_" + academicSessionId);
		try {
			lock.tryLock(1000, TimeUnit.SECONDS);
			Long Id = AutoNumberingFetchParams.getAutoNumberingId();
			AutoNumbering autoNumbering = autoNumberingRepository.findById(Id);
			autoNumbering.setVariableStart(autoNumbering.getVariableStart() + 1);
			autoNumberingRepository.save(autoNumbering);
			AutoNumberingResponse autoNumberingResponse = autoNumberingMapper
					.AutoNumberingToAutoNumberingResponse(autoNumbering);
			return autoNumberingResponse;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		} finally {
			lock.unlock();
		}
	}

}
