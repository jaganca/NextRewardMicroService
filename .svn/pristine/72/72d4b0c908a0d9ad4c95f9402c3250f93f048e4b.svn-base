package com.nexteducation.NextConfig.module.controller;

import java.util.List;

import javax.validation.Valid;
import javax.ws.rs.BeanParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.springframework.beans.factory.annotation.Autowired;

import com.nexteducation.NextConfig.module.model.params.Language.LanguageDeleteParams;
import com.nexteducation.NextConfig.module.model.params.Language.LanguageFetchParams;
import com.nexteducation.NextConfig.module.model.params.Language.LanguageUpdateParams;
import com.nexteducation.NextConfig.module.model.request.Language.LanguageAddRequest;
import com.nexteducation.NextConfig.module.model.request.Language.LanguageUpdateRequest;
import com.nexteducation.NextConfig.module.model.response.AddResponse;
import com.nexteducation.NextConfig.module.model.response.JerseyResponse;
import com.nexteducation.NextConfig.module.model.response.Language.LanguageResponse;
import com.nexteducation.NextConfig.module.service.core.LanguageService;
import com.nexteducation.NextConfig.util.NextConfigUrls;
import com.nexteducation.NextService.module.filter.queryable.QueryableParams;
import com.nexteducation.NextService.module.model.params.SessionParams;

/**
 * The Class LanguageController.
 */
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path(NextConfigUrls.V1 + NextConfigUrls.LANGUAGES)
public class LanguageController {

	/** The language service. */
	@Autowired
	LanguageService languageService;

	/**
	 * Adds languages.
	 *
	 * @param sessionParams the session params
	 * @param queryable the queryable
	 * @param languageAddRequest the language add request
	 * @return the adds response
	 */
	@POST
	public AddResponse addLanguages(@Valid @BeanParam SessionParams sessionParams, @BeanParam QueryableParams queryable,
			@Valid LanguageAddRequest languageAddRequest) {
		return languageService.addLanguages(sessionParams, queryable, languageAddRequest);
	}

	/**
	 * Update languages.
	 *
	 * @param languageUpdateParams the language update params
	 * @param sessionParams the session params
	 * @param queryable the queryable
	 * @param languageUpdateRequest the language update request
	 * @return the jersey response
	 */
	@PUT
	@Path(NextConfigUrls.LANGUAGE_PATH_ID)
	public JerseyResponse updateLanguages(@BeanParam LanguageUpdateParams languageUpdateParams,
			@Valid @BeanParam SessionParams sessionParams, @BeanParam QueryableParams queryable,
			@Valid LanguageUpdateRequest languageUpdateRequest) {
		return languageService.updateLanguages(languageUpdateParams, sessionParams, queryable, languageUpdateRequest);
	}

	/**
	 * Delete languages.
	 *
	 * @param languageDeleteParams the language delete params
	 * @param sessionParams the session params
	 * @param queryable the queryable
	 * @return the jersey response
	 */
	@DELETE
	@Path(NextConfigUrls.LANGUAGE_PATH_ID)
	public JerseyResponse deleteLanguages(@BeanParam LanguageDeleteParams languageDeleteParams,
			@Valid @BeanParam SessionParams sessionParams, @BeanParam QueryableParams queryable) {
		return languageService.deleteLanguages(languageDeleteParams, sessionParams, queryable);
	}

	/**
	 * Fetches the all languages.
	 *
	 * @param sessionParams the session params
	 * @param queryable the queryable
	 * @return the list
	 */
	@GET
	public List<LanguageResponse> fetchAllLanguages(@Valid @BeanParam SessionParams sessionParams,
			@BeanParam QueryableParams queryable) {
		return languageService.fetchAllLanguages(sessionParams, queryable);
	}

	/**
	 * Fetches the languages.
	 *
	 * @param languageFetchParams the language fetch params
	 * @param sessionParams the session params
	 * @param queryable the queryable
	 * @return the language response
	 */
	@GET
	@Path(NextConfigUrls.LANGUAGE_PATH_ID)
	public LanguageResponse fetchLanguages(@BeanParam LanguageFetchParams languageFetchParams,
			@Valid @BeanParam SessionParams sessionParams, @BeanParam QueryableParams queryable) {
		return languageService.fetchLanguages(languageFetchParams, sessionParams, queryable);
	}

}
