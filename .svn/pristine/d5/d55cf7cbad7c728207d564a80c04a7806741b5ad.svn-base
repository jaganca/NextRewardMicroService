package com.nexteducation.NextConfig.module.service.impl;

import java.util.List;
  

import javax.transaction.Transactional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nexteducation.NextService.exception.NextServiceClientException;
import com.nexteducation.NextService.exception.NextServiceException;
import com.nexteducation.NextConfig.hibernate.datasourceRouting.ReadOnlyConnection;
import com.nexteducation.NextService.module.filter.queryable.QueryableParams;
import com.nexteducation.NextConfig.module.mapper.ReligionMapper;
import com.nexteducation.NextConfig.module.model.bo.Religion;
import com.nexteducation.NextService.module.model.params.SessionParams;
import com.nexteducation.NextConfig.module.model.params.Religion.ReligionDeleteParams;
import com.nexteducation.NextConfig.module.model.params.Religion.ReligionFetchParams;
import com.nexteducation.NextConfig.module.model.params.Religion.ReligionUpdateParams;
import com.nexteducation.NextConfig.module.model.request.Religion.ReligionAddRequest;
import com.nexteducation.NextConfig.module.model.request.Religion.ReligionUpdateRequest;
import com.nexteducation.NextConfig.module.model.response.JerseyResponse;
import com.nexteducation.NextConfig.module.model.response.Religion.ReligionResponse;
import com.nexteducation.NextConfig.module.repository.ReligionRepository;
import com.nexteducation.NextConfig.module.service.core.ReligionService;
import com.nexteducation.NextConfig.util.DU;

@Service("ReligionService")
public class ReligionServiceImpl implements ReligionService {

	@Autowired
	ReligionRepository religionRepository;

	@Autowired
	ReligionMapper religionMapper;

	
	/**
	 * Fetches the Religion for a given Religion Long.
	 * @param ReligionFetchParams
	 * @param sessionParams
	 * @param queryable
	 * @return ReligionResponse
	 */
	@Override
	@Transactional
	@ReadOnlyConnection
	public ReligionResponse fetchReligions(ReligionFetchParams religionFetchParams,
			@Valid SessionParams sessionParams, @Valid QueryableParams queryable)
			throws NextServiceException, NextServiceClientException {

		Religion religion = religionRepository.findByIdAndBranchId(religionFetchParams.getReligionId(), sessionParams. getBranchId());
//		if(religion == null){
//			throw new NextServiceException("FetchReligionData","not found",500,"Religion not found in the repositroy for a given religionId","Internal Server error");
//		}
		ReligionResponse religionResponse = religionMapper
				.ReligionToReligionResponse(religion);
		return religionResponse;

	}

	/**
	 * Update the Religion for a given Religion Long.
	 * @param ReligionUpdateParams
	 * @param sessionParams
	 * @param queryable
	 * @return JerseyResponse
	 */
	@Override
	@Transactional
	public JerseyResponse updateReligions(@Valid ReligionUpdateParams religionUpdateParams,
			@Valid SessionParams sessionParams, QueryableParams queryable,
			ReligionUpdateRequest religionUpdateRequest)
			throws NextServiceException, NextServiceClientException {
		JerseyResponse jerseyResponse = new JerseyResponse();

		Religion religion = religionMapper
				.ReligionUpdateRequestToReligion(religionUpdateRequest);
		if(religion == null){
			throw new NextServiceException("updateReligions","not found",500,"Religion not found in the repository for a given religionId","Internal Server error");
		}
		Religion religionUpdate = religionRepository
				.findById( (religionUpdateRequest.getId()));
		religionUpdate.setModifiedBy(sessionParams.getUserId());
		religionUpdate.setModifiedOn(DU.now());
		religionUpdate.setAll(religion);
		religionRepository.save(religionUpdate);
		return jerseyResponse.withCode("true").withMsg("Record Updated Successfully");

	}
	/**
	 * Delete the Religion for a given Religion Long.
	 * @param ReligionDeleteParams
	 * @param sessionParams
	 * @param queryable
	 * @return ReligionResponse
	 */

	@Override
	@Transactional
	public JerseyResponse deleteReligions(@Valid ReligionDeleteParams religionDeleteParams,
			@Valid SessionParams sessionParams, QueryableParams queryable) {
		JerseyResponse jerseyResponse = new JerseyResponse();
		Long Long = religionDeleteParams.getReligionId();
		Religion religionDelete = religionRepository.findById(Long);
		if(religionDelete == null){
			throw new NextServiceException("deleteReligions","not found",500,"Religion not found in the repository for a given religionId","Internal Server error");
		}
		religionRepository.delete(religionDelete);
		return jerseyResponse.withMsg("Record deleted Successfully").withCode("true");
	}

	/**
	 * Fetches all the religions corresponding to the Branch and Academic Session ID
	 * @param sessionParams
	 * @param queryable
	 * @return List<ReligionResponse>
	 */
	
	@Override
	@Transactional
	@ReadOnlyConnection
	public List<ReligionResponse> fetchAllReligions(SessionParams sessionParams,
			QueryableParams queryable) {
		List<Religion> religionList = religionRepository.findByBranchId(sessionParams. getBranchId());
		List<Religion> nullReligions = religionRepository.findByBranchId(null);
		religionList.addAll(nullReligions);
//		if(religionList == null){
//			throw new NextServiceException("fetchAllReligions","not found",500,"No religion found","Internal Server error");
//		}
		return religionMapper.ReligionListToReligionResponseList(religionList);

	}
	/**
	 * Adds a new Religion
	 * @param sessionParams
	 * @param queryable
	 * @return JerseyResponse
	 */

	@Override
	@Transactional
	public JerseyResponse addReligions(SessionParams sessionParams, QueryableParams queryable,
			ReligionAddRequest religionAddRequest) {
		JerseyResponse jerseyResponse = new JerseyResponse();
		Religion religion = religionMapper
				.ReligionAddRequestToReligion(religionAddRequest);
		religion.setCreatedBy(sessionParams.getUserId());
		religion.setModifiedBy(sessionParams.getUserId());
		religion.setBranchId(religionAddRequest.getBranchId());
		religion.setParentReligion(religionRepository.findById(religionAddRequest.getParentReligionId()));
		religionRepository.save(religion);
		return jerseyResponse.withMsg("Record Added Successfully").withCode("true");

	}

}
